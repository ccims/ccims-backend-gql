"""All queries for requesting stuff"""
type Query {
  """
  Requests an object (node) using the given ID. If the given ID is invalid an error will be returned
  """
  node(
    """The ID of the node to return. This can't be empty or null"""
    id: ID!
  ): Node

  """Returns the string which is given as input"""
  echo(
    """The String to be returned"""
    input: String
  ): String

  """Requests projects within the given limits"""
  projects(
    """Returns projects after the given edge"""
    after: String

    """Returns projects before the given edge"""
    before: String

    """Only projects matching this filter will be returned"""
    filterBy: ProjectFilter

    """Only return the first _n_ projects in the system"""
    first: Int

    """Only return the last _n_ projects in the system"""
    last: Int
  ): ProjectPage
}

"""An object which can be identified by an ID - called a node"""
interface Node {
  """
  The ID of this node. Every node will have an non-empty and non-null edge.
  
  If this is ever empty or null, something went wrong.
  """
  id: ID
}

"""A page of projects"""
type ProjectPage implements Page {
  """All projects on this page"""
  nodes: [Project]

  """Edges to all nodes containing the cursor"""
  edges: [ProjectEdge]

  """Information about the current page (like length, first/last element)"""
  pageInfo: PageInfo!

  """
  The total number of elements matching the filter
  
  (Even ones that don't match the current page)
  """
  totalCount: Int!
}

"""
A page of elements

Contains edges and nodes as well as some information and a node count
"""
interface Page {
  """Information about the current page (like length, first/last element)"""
  pageInfo: PageInfo!

  """
  The total number of elements matching the filter
  
  (Even ones that don't match the current page)
  """
  totalCount: Int!
}

"""
Information about a page including the first and last elements cursor and next/previous pages
"""
type PageInfo {
  """
  The cursor of the first element on the page. Can be used to request the previous page.
  """
  startCursor: String

  """
  The cursor of the last element on the page. Can be used to request the next page.
  """
  endCursor: String

  """true iff there is another page of elements with the current filter"""
  hasNextPage: Boolean!

  """true iff there is a previous page of elements with the current filter"""
  hasPreviousPage: Boolean!
}

"""
A project is a one unit in which the participating components colaborate
"""
type Project implements Node {
  """The unique id of this project"""
  id: ID!

  """
  The human readable name of this project
  
  Max. 256 characters
  """
  name: String!

  """
  Components which are part of this project and match the filter.
  
  If no filter is given, all components will be returned
  """
  components(
    """
    Return only components AFTER the one with the specified cursor (exclusive)
    """
    after: String

    """
    Return only components BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only components matching this filter"""
    filterBy: ComponentFilter

    """Return at most the first n components"""
    first: Int

    """Return at most the last n components"""
    last: Int
  ): ComponentPage

  """
  Users which are part of this project and match the given filter.
  
  If no filter is given, all users will be returned
  """
  users(
    """Return only users AFTER the one with the specified cursor (exclusive)"""
    after: String

    """Return only users BEFORE the one with the specified cursor (exclusive)"""
    before: String

    """Return only users matching this filter"""
    filterBy: UserFilter

    """Return at most the first n users"""
    first: Int

    """Return at most the last n users"""
    last: Int
  ): UserPage

  """The user who administrates "owns" the project"""
  owner: User!

  """
  All issues on this node, matching the given filter.
  
      These are all issues regardless on which components/interfaces they are located.
  
  
      If no filter is given, all issues will be returned
  """
  issues(
    """Return only issues AFTER the one with the specified cursor (exclusive)"""
    after: String

    """
    Return only issues BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only issues matching this filter"""
    filterBy: IssueFilter

    """Return at most the first n issues"""
    first: Int

    """Return at most the last n issues"""
    last: Int
  ): IssuePage

  """
  All labels which are available on this project, matching the given filter.
  
      If no filter is given, all labels will be returned
  """
  labels(
    """Return only labels AFTER the one with the specified cursor (exclusive)"""
    after: String

    """
    Return only labels BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only labels matching this filter"""
    filterBy: LabelFilter

    """Return at most the first n labels"""
    first: Int

    """Return at most the last n labels"""
    last: Int
  ): LabelPage
}

"""A page of multiple components"""
type ComponentPage implements Page {
  """All components on this page"""
  nodes: [Component]

  """Edges to all nodes containing the cursor"""
  edges: [ComponentEdge]

  """Information about the current page (like length, first/last element)"""
  pageInfo: PageInfo!

  """
  The total number of elements matching the filter
  
  (Even ones that don't match the current page)
  """
  totalCount: Int!
}

"""
A component known to ccims.

A component can have issues and can be assigned to multiple projects. (NOTE: One IMS per component)
"""
type Component implements Node & IssueLocation {
  """The unique id of this component"""
  id: ID!

  """
  The (non unique) display name of this component
  
  Max. 256 characters
  """
  name: String!

  """The user who administrates "owns" the component"""
  owner: User

  """
  A textual description (of the fuction) of this component.
  
  Max. 65536 characters
  """
  description: String

  """
  The software of the IMS used by this component. This must be one of the supported ones
  """
  imsType: IMSType

  """
  All issues on this node, matching the given filter.
  
      These are all issues regardless on which components/interfaces they are located.
  
  
      If no filter is given, all issues will be returned
  """
  issues(
    """Return only issues AFTER the one with the specified cursor (exclusive)"""
    after: String

    """
    Return only issues BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only issues matching this filter"""
    filterBy: IssueFilter

    """Return at most the first n issues"""
    first: Int

    """Return at most the last n issues"""
    last: Int
  ): IssuePage

  """
  Only returnes issues which are assigned to this __location__ matching the filter
  
  
      (for a component this won't return all issues of a component - Issues that are only on iterfaces won't be returned).
  
      If no filter is given, all issues will be returned
  """
  issuesOnLocation(
    """Return only issues AFTER the one with the specified cursor (exclusive)"""
    after: String

    """
    Return only issues BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only issues matching this filter"""
    filterBy: IssueFilter

    """Return at most the first n issues"""
    first: Int

    """Return at most the last n issues"""
    last: Int
  ): undefined

  """Requests projects within the given limits"""
  projects(
    """Returns projects after the given edge"""
    after: String

    """Returns projects before the given edge"""
    before: String

    """Only projects matching this filter will be returned"""
    filterBy: ProjectFilter

    """Only return the first _n_ projects in the system"""
    first: Int

    """Only return the last _n_ projects in the system"""
    last: Int
  ): ProjectPage

  """Requests component interfaces which this component offers"""
  interfaces(
    """Returns interfaces after the given edge"""
    after: String

    """Returns interfaces before the given edge"""
    before: String

    """Only interfaces matching this filter will be returned"""
    filterBy: ComponentInterfaceFilter

    """Only return the first _n_ interfaces in the system"""
    first: Int

    """Only return the last _n_ interfaces in the system"""
    last: Int
  ): ComponentInterfacePage

  """Requests component interfaces that are used/consumed by this component"""
  consumedInterfaces(
    """Returns interfaces after the given edge"""
    after: String

    """Returns interfaces before the given edge"""
    before: String

    """Only interfaces matching this filter will be returned"""
    filterBy: ComponentInterfaceFilter

    """Only return the first _n_ interfaces in the system"""
    first: Int

    """Only return the last _n_ interfaces in the system"""
    last: Int
  ): ComponentInterfacePage
}

"""
A location an issue can be assigned to

Currently this can be either a component or an interface
"""
interface IssueLocation implements Node {
  """The unique id of the node of this location"""
  id: ID!

  """
  The name of the location
  
  Max. 256 characters
  """
  name: String!

  """
  Only returnes issues which are assigned to this __location__ matching the filter
  
  
      (for a component this won't return all issues of a component - Issues that are only on iterfaces won't be returned).
  
      If no filter is given, all issues will be returned
  """
  issuesOnLocation(
    """Return only issues AFTER the one with the specified cursor (exclusive)"""
    after: String

    """
    Return only issues BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only issues matching this filter"""
    filterBy: IssueFilter

    """Return at most the first n issues"""
    first: Int

    """Return at most the last n issues"""
    last: Int
  ): undefined
}

"""
Filters for Issues. All parameters given in this filter will be connected via _AND_


    Not specific issues in issue management systems but the issue in the ccims
"""
input IssueFilter {
  """The title of the issue must match any of the given strings"""
  title: [String!]

  """The issue must be on at least one of the components with the given ids"""
  components: [ID!]

  """The body text of this issue must match this given __RegEx__"""
  body: String

  """The id of the user creating the issue must be any of the given ones"""
  createdBy: [ID!]

  """
  The id of the user last editing the issue must match any of the ones in the list
  """
  editedBy: [ID!]

  """The issue must have been created __after__ the given date (inclusive)"""
  createdAfter: Date

  """The issue must have been created __before__ the given date (inclusive)"""
  createdBefore: Date

  """
  The issue must have been last edited __after__ the given date (inclusive)
  """
  editedAfter: Date

  """
  The issue must have been last edited __before__ the given date (inclusive)
  """
  editedBefore: Date

  """
  The last event in this issue must have occurred __after__ the given date (inclusive)
  """
  updatedAfter: Date

  """
  The last event in this issue must have occurred __before__ the given date (inclusive)
  """
  updatedBefore: Date

  """If given, filters for opened/closed issues"""
  isOpen: Boolean

  """
  If given, filters for issues which are/aren't duplicates of another issue
  """
  isDuplicate: Boolean

  """The issue must have any of the given categories to match the filter"""
  category: [IssueCategory!]

  """If given, filters for issues which do/don't link other issues"""
  linksIssues: Boolean

  """The issue must link at least one of the issues with the given ids"""
  linkedIssues: [ID!]

  """
  The issue (body text) must have all the reactions in one of the lists given.
  """
  reactions: [[String!]!]

  """
  Any of the users with the given ids must be an assignee to the issue for it to match this filter
  """
  assignees: [ID!]

  """
  The issue must have all the labels of at least that are matched by at least one of the given label filters
  """
  labels: [LabelFilter!]

  """
  Any of the users with the given ids must be a participant to the issue for it to match this filter
  """
  participants: [ID!]

  """
  The issue must be assigned to at least one of the locations with the given ids
  """
  locations: [ID!]

  """
  If given filters for issues the current user is allowed/not allowed to edit (the title and body text)
  """
  currentUserCanEdit: Boolean

  """
  If given filters for issues the current user is allowed/not allowed to write new comments on
  """
  currentUserCanComment: Boolean

  """Filters for all issues that have a start date __after__ the give date"""
  startDateAfter: Date

  """Filters for all issues that have a start date __before__ the give date"""
  startDateBefore: Date

  """Filters for all issues that have a due date __after__ the give date"""
  dueDateAfter: Date

  """Filters for all issues that have a due date __before__ the give date"""
  dueDateBefore: Date

  """
  Matches all issues that have an estimated time __greater or equal__ than the given one
  """
  estimatedTimeGreaterThan: TimeSpan

  """
  Matches all issues that have an estimated time __lower or equal__ than the given one
  """
  estimatedTimeLowerThan: TimeSpan

  """
  Matches all issues that have an actual spent time __greater or equal__ than the given one
  """
  spentTimeGreaterThan: TimeSpan

  """
  Matches all issues that have an actual spent time __lower or equal__ than the given one
  """
  spentTimeLowerThan: TimeSpan
}

"""
The `Date` scalar is a sting containing a date in a format compatible with _ISO-8601_


    Example: `"2011-10-10T14:48:00"`
"""
scalar Date

"""
The category of an issue. The issue will be displayed accordingly in the ccims
"""
enum IssueCategory {
  """
  If an issue is classified _bug_ it describes an error, flaw or fault in one ore multiple component(s) or interface(s)
  """
  BUG

  """
  If an issue is defined a _feature request_, it describes a functionality that is to be implemented at some point
  """
  FEATURE_REQUEST

  """
  The category for issues, that either weren't yet assigned to a category or that don't fit into one of the other categories
  """
  UNCLASSIFIED
}

"""
A Filter data input for labels.  All parameters given in this filter will be connected via _AND_
"""
input LabelFilter {
  """A lists of names. The label needs to match any one or more of these."""
  name: [String!]

  """The __RegEx__ the description of the label needs to match"""
  description: String

  """
  A list of label colours. Any one or more of the given colours need to match the labels colour.
  """
  color: [Color!]
}

"""
A scalar type representing a colour in RGB colour space.

    The scalar must be a string in CSS Colour Hex format:


    `#rrggbb` where `rr`, `gg`, `bb` are the hex values between _0_ and _ff_


    
    Example: `#ffff00` (would be a _beautiful_ yellow)
"""
scalar Color

"""
A integer number representing the length of the time span in milliseconds


    Example: `60000` (equivalent to a time span of one minute)
"""
scalar TimeSpan

"""
A user of th ccims. Can be assigned to projects, components and can have multiple ims accounts
"""
type User implements Node {
  """The unique id of this user"""
  id: ID!

  """The unique username used for login"""
  username: String!

  """The name of the user to display in the GUI"""
  displayName: String

  """The mail address of the user"""
  email: String!

  """Requests projects within the given limits"""
  projects(
    """Returns projects after the given edge"""
    after: String

    """Returns projects before the given edge"""
    before: String

    """Only projects matching this filter will be returned"""
    filterBy: ProjectFilter

    """Only return the first _n_ projects in the system"""
    first: Int

    """Only return the last _n_ projects in the system"""
    last: Int
  ): ProjectPage

  """Returns all issues this user is explicitly assigned to"""
  assignedToIssues(
    """Return only issues AFTER the one with the specified cursor (exclusive)"""
    after: String

    """
    Return only issues BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only issues matching this filter"""
    filterBy: IssueFilter

    """Return at most the first n issues"""
    first: Int

    """Return at most the last n issues"""
    last: Int
  ): IssuePage

  """
  Returns all issues this user is a participant of (e.g. through contibuting, being assigned etc.)
  """
  participantOfIssues(
    """Return only issues AFTER the one with the specified cursor (exclusive)"""
    after: String

    """
    Return only issues BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only issues matching this filter"""
    filterBy: IssueFilter

    """Return at most the first n issues"""
    first: Int

    """Return at most the last n issues"""
    last: Int
  ): IssuePage

  """
  All comments written by this user, matching the given filter.
  
      If no filter is given, all comments will be returned
  """
  issueComments(
    """
    Return only comments AFTER the one with the specified cursor (exclusive)
    """
    after: String

    """
    Return only comments BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only comments matching this filter"""
    filterBy: IssueCommentFilter

    """Return at most the first n comments"""
    first: Int

    """Return at most the last n comments"""
    last: Int
  ): IssueCommentPage
}

"""
Filter for a Project. All parameters given in this filter will be connected via _AND_
"""
input ProjectFilter {
  """The name of the project must match any of the given strings"""
  name: [String!]

  """The project must have any of the components with the given ids"""
  components: [ID!]

  """
  At least one of the users with the given ids must be part of the project
  """
  users: [ID!]

  """The Owner of the project must be a user with one of the given ids"""
  owner: [ID!]

  """
  At least one of the issues given must be on a component assigned to the project
  """
  issues: [ID!]
}

"""A page of multiple issues"""
type IssuePage implements Page {
  """All issues on this page"""
  nodes: [Issue]

  """Edges to all nodes containing the cursor"""
  edges: [IssueEdge]

  """Information about the current page (like length, first/last element)"""
  pageInfo: PageInfo!

  """
  The total number of elements matching the filter
  
  (Even ones that don't match the current page)
  """
  totalCount: Int!
}

"""
A cros component issue within ccims which links multiple issues from single ims
"""
type Issue implements Comment & Node {
  """The unique id of this issue"""
  id: ID!

  """
  The title to display for this issue.
  
  Not unique; Max. 256 characters
  """
  title: String!

  """
  The body text of the issue.
  Markdown supported.
  
  Max. 65536 characters
  """
  body: String

  """The body text of the issue rendered to html"""
  bodyRendered: String

  """The user who originally created the issue (in ccims or any ims)"""
  createdBy: User

  """
  A list of all people who edited the root of this issue (body and title)
  """
  editedBy: [User!]

  """The date the issue was first created on"""
  createdAt: Date!

  """
  Date when the core issue(title, body etc.) was last changed (comments and other events DO NOT count)
  """
  lastEditedAt: Date

  """
  Date when any update / activity was made to any part of the issue (__including__ title, commens, reactions)
  """
  updatedAt: Date

  """`true` iff the issue is open at this point"""
  isOpen: Boolean!

  """
  Weather or not this issue has been marked as duplicate of another issue
  """
  isDuplicate: Boolean!

  """
  The ccims-issue-category the issue belongs to.
  
  This can be one of BUG,FEATURE_REQUEST or UNCLASSIFIED
  """
  category: IssueCategory!

  """
  `true` iff the user authenticated by the given JWT is permitted to edit this issue.
  
  This only refers to editing the core issue (title, body, etc.)
  """
  currentUserCanEdit: Boolean!

  """
  `true` iff the user authenticated by the given JWT is permitted to comment on this issue.
  """
  currentUserCanComment: Boolean!

  """
  A start date set for start of work on this issue.
  
  This is only for displaying and has no effect on the ccims but will be synce to other ims
  """
  startDate: Date

  """
  A due date set when work on the issue must be done.
  
  This is only for displaying and has no effect on the ccims but will be synce to other ims
  """
  dueDate: Date

  """
  The time estimated needed for work on this issue.
  
  This is only for displaying and has no effect on the ccims but will be synce to other ims
  """
  estimatedTime: TimeSpan

  """
  The time already spent on work on this issue.
  
  This is only for displaying and has no effect on the ccims but will be synce to other ims
  """
  spentTime: TimeSpan

  """
  All comments for this issue, matching the given filter.
  
      If no filter is given, all comments will be returned
  """
  issueComments(
    """
    Return only comments AFTER the one with the specified cursor (exclusive)
    """
    after: String

    """
    Return only comments BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only comments matching this filter"""
    filterBy: IssueCommentFilter

    """Return at most the first n comments"""
    first: Int

    """Return at most the last n comments"""
    last: Int
  ): IssueCommentPage

  """
  All issues linked to or linking this issue, matching the given filter.
  
      If no filter is given, all issues will be returned
  """
  linkedIssues(
    """Return only issues AFTER the one with the specified cursor (exclusive)"""
    after: String

    """
    Return only issues BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only issues matching this filter"""
    filterBy: IssueFilter

    """Return at most the first n issues"""
    first: Int

    """Return at most the last n issues"""
    last: Int
  ): undefined

  """
  All reactions on this node, matching the given filter.
  
      If no filter is given, all reactions will be returned
  """
  reactions(
    """
    Return only reactions AFTER the one with the specified cursor (exclusive)
    """
    after: String

    """
    Return only reactions BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only reactions matching this filter"""
    filterBy: ReactionGroupFilter

    """Return at most the first n reactions"""
    first: Int

    """Return at most the last n reactions"""
    last: Int
  ): ReactionGroupPage

  """
  All users who are explicitely assigned to issue, matching the given filter.
  
      If no filter is given, all issues will be returned
  """
  assignees(
    """Return only users AFTER the one with the specified cursor (exclusive)"""
    after: String

    """Return only users BEFORE the one with the specified cursor (exclusive)"""
    before: String

    """Return only users matching this filter"""
    filterBy: UserFilter

    """Return at most the first n users"""
    first: Int

    """Return at most the last n users"""
    last: Int
  ): UserPage

  """
  All labels on this issue, matching the given filter.
  
      If no filter is given, all labels will be returned
  """
  labels(
    """Return only labels AFTER the one with the specified cursor (exclusive)"""
    after: String

    """
    Return only labels BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only labels matching this filter"""
    filterBy: LabelFilter

    """Return at most the first n labels"""
    first: Int

    """Return at most the last n labels"""
    last: Int
  ): LabelPage

  """
  All users participating on this issue (by writing a comment, etc.), matching the given filter.
  
      If no filter is given, all users will be returned
  """
  participants(
    """Return only users AFTER the one with the specified cursor (exclusive)"""
    after: String

    """Return only users BEFORE the one with the specified cursor (exclusive)"""
    before: String

    """Return only users matching this filter"""
    filterBy: UserFilter

    """Return at most the first n users"""
    first: Int

    """Return at most the last n users"""
    last: Int
  ): UserPage

  """
  All components where this issue has been pinned, matching the given filter.
  
      If no filter is given, all components will be returned
  """
  pinnedOn(
    """
    Return only components AFTER the one with the specified cursor (exclusive)
    """
    after: String

    """
    Return only components BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only components matching this filter"""
    filterBy: ComponentFilter

    """Return at most the first n components"""
    first: Int

    """Return at most the last n components"""
    last: Int
  ): undefined

  """
  All timeline events for this issue in chonological order from oldest to newest, matching the given filter.
  
      If no filter is given, all events will be returned
  """
  timeline(
    """
    Return only timeline events AFTER the one with the specified cursor (exclusive)
    """
    after: String

    """
    Return only timeline events BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only timeline events matching this filter"""
    filterBy: IssueTimelineItemFilter

    """Return at most the first n timeline events"""
    first: Int

    """Return at most the last n timeline events"""
    last: Int
  ): IssueTimelineItemPage

  """
  All locations this issue is assigned to, matching the given filter.
  
      If no filter is given, all locations will be returned
  """
  locations(
    """
    Return only locations AFTER the one with the specified cursor (exclusive)
    """
    after: String

    """
    Return only locations BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only locations matching this filter"""
    filterBy: IssueLocationFilter

    """Return at most the first n locations"""
    first: Int

    """Return at most the last n locations"""
    last: Int
  ): IssueLocationPage
}

"""An interface specifying an editable text block (e.g. Issue, Comment)"""
interface Comment {
  """The unique id of this comment"""
  id: ID!

  """
  The body text of the comment.
  Markdown supported.
  
  Max. 65536 characters
  """
  body: String

  """The body text of the comment rendered to html"""
  bodyRendered: String

  """The user who originally created the comment (in ccims or any ims)"""
  createdBy: User

  """
  A list of all people who edited the root of this comment (body and title)
  """
  editedBy: [User!]

  """The date the comment was first created on"""
  createdAt: Date!

  """
  Date when the core comment(title, body etc.) was last changed (comments and other events DO NOT count)
  """
  lastEditedAt: Date

  """
  `true` iff the user authenticated by the given JWT is permitted to edit this comment.
  
  This only refers to editing the core comment (title, body, etc.)
  """
  currentUserCanEdit: Boolean!

  """
  All reactions on this node, matching the given filter.
  
      If no filter is given, all reactions will be returned
  """
  reactions(
    """
    Return only reactions AFTER the one with the specified cursor (exclusive)
    """
    after: String

    """
    Return only reactions BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only reactions matching this filter"""
    filterBy: ReactionGroupFilter

    """Return at most the first n reactions"""
    first: Int

    """Return at most the last n reactions"""
    last: Int
  ): ReactionGroupPage
}

"""A page of reaction groups"""
type ReactionGroupPage implements Page {
  """All reaction groups on this page"""
  nodes: [ReactionGroup]

  """Edges to all nodes containing the cursor"""
  edges: [ReactionGroupEdge]

  """Information about the current page (like length, first/last element)"""
  pageInfo: PageInfo!

  """
  The total number of elements matching the filter
  
  (Even ones that don't match the current page)
  """
  totalCount: Int!
}

"""
A relation of users who have reacted with a certain reaction to something
"""
type ReactionGroup implements Node {
  """The unique id of this reaction group"""
  id: ID!

  """
  Users who reacted with this reaction.
  
  
              If there are only a few, all users will be returned. 
              If too many users are part of this reaction group, only a few will be returned
  """
  users: [User]

  """
  The total number of users in this reaction group.
  This is needed in case the `users` list was truncated.
  """
  totalUserCount: Int!

  """
  The name of the recation with which the people in this reaction group have reacted
  """
  reaction: String!
}

"""An edge for a RecationGroupPage to link a cursor to an element"""
type ReactionGroupEdge {
  """The reaction group linked to by this edge"""
  node: ReactionGroup

  """The cursor for use in the pagination"""
  cursor: String!
}

"""
A filter for reaction groups (a reaction together with the users who reacted). All parameters given in this filter will be connected via _AND_
"""
input ReactionGroupFilter {
  """The reactions name must match any one or more of the given strings"""
  reaction: [String!]

  """
  A list of Users who reacted. Any reaction group which contains at least one of the given users will match the filter
  """
  users: [ID!]
}

"""A page of multiple issue comments"""
type IssueCommentPage implements Page {
  """All issue comments on this page"""
  nodes: [IssueComment]

  """Edges to all nodes containing the cursor"""
  edges: [IssueCommentEdge]

  """Information about the current page (like length, first/last element)"""
  pageInfo: PageInfo!

  """
  The total number of elements matching the filter
  
  (Even ones that don't match the current page)
  """
  totalCount: Int!
}

"""A commemt on an issue. Not including th issue body itself"""
type IssueComment implements IssueTimelineItem & Comment & Node {
  """The unique id of this comment"""
  id: ID!

  """The issue this comment belongs to"""
  issue: Issue!

  """
  The body text of the comment.
  Markdown supported.
  
  Max. 65536 characters
  """
  body: String

  """The body text of the comment rendered to html"""
  bodyRendered: String

  """The user who originally created the comment (in ccims or any ims)"""
  createdBy: User

  """
  A list of all people who edited the root of this comment (body and title)
  """
  editedBy: [User!]

  """The date the comment was first created on"""
  createdAt: Date!

  """
  Date when the core comment(title, body etc.) was last changed (comments and other events DO NOT count)
  """
  lastEditedAt: Date

  """
  `true` iff the user authenticated by the given JWT is permitted to edit this comment.
  
  This only refers to editing the core comment (title, body, etc.)
  """
  currentUserCanEdit: Boolean!

  """
  All reactions on this node, matching the given filter.
  
      If no filter is given, all reactions will be returned
  """
  reactions(
    """
    Return only reactions AFTER the one with the specified cursor (exclusive)
    """
    after: String

    """
    Return only reactions BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only reactions matching this filter"""
    filterBy: ReactionGroupFilter

    """Return at most the first n reactions"""
    first: Int

    """Return at most the last n reactions"""
    last: Int
  ): ReactionGroupPage
}

"""An event in the timeline of an issue wiht a date and a creator"""
interface IssueTimelineItem implements Node {
  """The unique id of this timeline item"""
  id: ID!

  """The issue this timeline event belongs to"""
  issue: Issue!

  """
  The user responsible for the creation of the event (e.g. autor of a comment)
  
  
              It's possible there is no autor, for example if the action was performed automatically
  """
  createdBy: User

  """
  The date the event occured on/was created.
  
  This ISN'T updated if the event is be changed
  """
  createdAt: Date!
}

"""An edge for an IssueCommentPage to link a cursor to an element"""
type IssueCommentEdge {
  """The issue comment linked to by this edge"""
  node: IssueComment

  """The cursor for use in the pagination"""
  cursor: String!
}

"""
Filter for comments on issues (not including the issue bodies themselves). All parameters given in this filter will be connected via _AND_
"""
input IssueCommentFilter {
  """
  The id of the issue the comment belongs to must match any of the given ids
  """
  issue: [ID!]

  """
  The id of the user creating the comment.Must match any one of the given ids
  """
  createdBy: [ID!]

  """
  The id of the user who __last__ edited the comment must match any of the given ids
  """
  editedBy: [ID!]

  """Match all comments created after the given date (inclusive)"""
  createdAfter: Date

  """Match all comments created before the given date (inclusive)"""
  createdBefore: Date

  """Match all comments last edited after the given date (inclusive)"""
  editedAfter: Date

  """Match all comments last edited before the given date (inclusive)"""
  editedBefore: Date

  """The body of a comment must match this __RegEx__ to match the filter"""
  body: String

  """A comment must have all the reactions in one of the lists given."""
  reactions: [[String!]!]

  """
  If given, filters for comments which the user either has or hasn't got edit permissions
  """
  currentUserCanEdit: Boolean
}

"""A page of multiple users"""
type UserPage implements Page {
  """All users on this page"""
  nodes: [User]

  """Edges to all nodes containing the cursor"""
  edges: [UserEdge]

  """Information about the current page (like length, first/last element)"""
  pageInfo: PageInfo!

  """
  The total number of elements matching the filter
  
  (Even ones that don't match the current page)
  """
  totalCount: Int!
}

"""An edge for a UserPage to link a cursor to an element"""
type UserEdge {
  """The user linked to by this edge"""
  node: User

  """The cursor for use in the pagination"""
  cursor: String!
}

"""
Filter for a user of the system. All parameters given in this filter will be connected via _AND_
"""
input UserFilter {
  """Any of the strings must match the users username"""
  username: [String!]

  """The users username must match this given __RegEx__"""
  displayName: String

  """The mail address of the user must match any of the ones given"""
  email: [String!]

  """
  The user must be member of at least one of the projects with the given ids
  """
  projects: [ID!]

  """
  The user must be assigned to at least one of the issues with the given ids
  """
  assignedToIssues: [ID!]

  """
  The user must be participant of at least one of the issues with the given ids
  """
  participantOfIssues: [ID!]

  """
  The user must have written at least one of the comments with the given ids
  """
  issueComments: [ID!]
}

"""A page of multiple labels"""
type LabelPage implements Page {
  """All labels on this page"""
  nodes: [Label]

  """Edges to all nodes containing the cursor"""
  edges: [LabelEdge]

  """Information about the current page (like length, first/last element)"""
  pageInfo: PageInfo!

  """
  The total number of elements matching the filter
  
  (Even ones that don't match the current page)
  """
  totalCount: Int!
}

"""A label assignable to issues. A label is per-project"""
type Label implements Node {
  """The unique id of this label"""
  id: ID!

  """
  The name of the label to display.
  
   Max. 256 characters
  """
  name: String!

  """
  A text describing the labels' function
  
  Max. 65536 characters
  """
  description: String

  """The color of the label in the GUI"""
  color: Color

  """Requests projects within the given limits"""
  projects(
    """Returns projects after the given edge"""
    after: String

    """Returns projects before the given edge"""
    before: String

    """Only projects matching this filter will be returned"""
    filterBy: ProjectFilter

    """Only return the first _n_ projects in the system"""
    first: Int

    """Only return the last _n_ projects in the system"""
    last: Int
  ): ProjectPage
}

"""An edge for a LabelPage to link a cursor to an element"""
type LabelEdge {
  """The label linked to by this edge"""
  node: Label

  """The cursor for use in the pagination"""
  cursor: String!
}

"""Filters for component matching the given properties"""
input ComponentFilter {
  """The name of the component must match any of the given strings"""
  name: [String!]

  """The owner of the project must have any of the given ids"""
  owner: [ID!]

  """The projects description must match the given __RegEx__"""
  description: String

  """The IMS type of a component must be one of the given ones"""
  imsType: [IMSType!]
}

"""
The type of the Issue management system. Currently only GitHub and ccims internal are available
"""
enum IMSType {
  """
  The type of the Issue management system. Currently only GitHub and ccims internal are available
  """
  CCIMS

  """GitHub (or GitHub enterprise server) is the IMS for the component"""
  GITHUB
}

"""A page of multiple issue timeline items"""
type IssueTimelineItemPage implements Page {
  """All issue timeline items on this page"""
  nodes: [IssueTimelineItem]

  """Edges to all nodes containing the cursor"""
  edges: [IssueTimelineItemEdge]

  """Information about the current page (like length, first/last element)"""
  pageInfo: PageInfo!

  """
  The total number of elements matching the filter
  
  (Even ones that don't match the current page)
  """
  totalCount: Int!
}

"""An edge for an IssueTimelineItemPage to link a cursor to an element"""
type IssueTimelineItemEdge {
  """The issue timeline item linked to by this edge"""
  node: IssueTimelineItem

  """The cursor for use in the pagination"""
  cursor: String!
}

"""
Filters for certain timeline events. All parameters given in this filter will be connected via _AND_


    __Please note:__ It's currently __not__ possible to filter for specific properties of an event. Might be added in future
"""
input IssueTimelineItemFilter {
  """
  Filters for the creator user of the timeline event. The id of the user must match any of the given ids
  """
  createdBy: [ID!]

  """
  The timeline event must have occurred after the given date (inclusive) to match the filter
  """
  createdAfter: Date

  """
  The timeline event must have occurred before the given date (inclusive) to match the filter
  """
  createdBefore: Date
}

"""A page of multiple issue locations"""
type IssueLocationPage implements Page {
  """All issue locations on this page"""
  nodes: [IssueLocation]

  """Edges to all nodes containing the cursor"""
  edges: [IssueLocationEdge]

  """Information about the current page (like length, first/last element)"""
  pageInfo: PageInfo!

  """
  The total number of elements matching the filter
  
  (Even ones that don't match the current page)
  """
  totalCount: Int!
}

"""An edge for an IssueLocationPage to link a cursor to an element"""
type IssueLocationEdge {
  """The issue location linked to by this edge"""
  node: IssueLocation

  """The cursor for use in the pagination"""
  cursor: String!
}

"""
Filters for Issues locations (components and interfaces). All parameters given in this filter will be connected via _AND_
"""
input IssueLocationFilter {
  """The name of the location must match one of the gien strings"""
  name: [String!]
}

"""An edge for an IssuePage to link a cursor to an element"""
type IssueEdge {
  """The issue linked to by this edge"""
  node: Issue

  """The cursor for use in the pagination"""
  cursor: String!
}

"""A page of multiple component interfaces"""
type ComponentInterfacePage implements Page {
  """All interfaces on this page"""
  nodes: [ComponentInterface]

  """Edges to all nodes containing the cursor"""
  edges: [ComponentInterfaceEdge]

  """Information about the current page (like length, first/last element)"""
  pageInfo: PageInfo!

  """
  The total number of elements matching the filter
  
  (Even ones that don't match the current page)
  """
  totalCount: Int!
}

"""
An interface offered by a component which can be counsumed by other components
"""
type ComponentInterface implements Node & IssueLocation {
  """The unique id of this component interface"""
  id: ID!

  """
  The name of the component interface
  
  Max. 256 characters
  """
  name: String!

  """
  A textual description (of the fuction) of this component interface .
  
  Max. 65536 characters
  """
  description: String

  """The parent component of this interface which offers it"""
  component: Component!

  """
  Only returnes issues which are assigned to this __location__ matching the filter
  
  
      (for a component this won't return all issues of a component - Issues that are only on iterfaces won't be returned).
  
      If no filter is given, all issues will be returned
  """
  issuesOnLocation(
    """Return only issues AFTER the one with the specified cursor (exclusive)"""
    after: String

    """
    Return only issues BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only issues matching this filter"""
    filterBy: IssueFilter

    """Return at most the first n issues"""
    first: Int

    """Return at most the last n issues"""
    last: Int
  ): undefined

  """
  Components which consume the interface and match the filter.
  
  If no filter is given, all components will be returned
  """
  consumedBy(
    """
    Return only components AFTER the one with the specified cursor (exclusive)
    """
    after: String

    """
    Return only components BEFORE the one with the specified cursor (exclusive)
    """
    before: String

    """Return only components matching this filter"""
    filterBy: ComponentFilter

    """Return at most the first n components"""
    first: Int

    """Return at most the last n components"""
    last: Int
  ): undefined
}

"""An edge for a ComponentInterfacePage to link a cursor to an element"""
type ComponentInterfaceEdge {
  """The interface linked to by this edge"""
  node: ComponentInterface

  """The cursor for use in the pagination"""
  cursor: String!
}

"""Filters for an instance of a component's interface"""
input ComponentInterfaceFilter {
  """The name the component has to have"""
  name: String

  """Filter for interfacs owned by the user with this id"""
  owner: ID

  """A Regex which the description of the interface needs to match"""
  description: String

  """Filter for The ID of the component the inerface is offered by"""
  component: ID

  """
  If given, only interfaces which are consumed by at least one of the components with the given ids can match the filter
  """
  consumedBy: [ID!]
}

"""An edge for a ComponentPage to link a cursor to an element"""
type ComponentEdge {
  """The component linked to by this edge"""
  node: Component

  """The cursor for use in the pagination"""
  cursor: String!
}

"""An edge for a ProjectPage to link a cursor to an element"""
type ProjectEdge {
  """The project linked to by this edge"""
  node: Project

  """The cursor for use in the pagination"""
  cursor: String!
}

"""Mutations to change the data within the ccims"""
type Mutation {
  """Returns the given string"""
  testMutation(
    """A name for any object"""
    name: String
  ): String
}
